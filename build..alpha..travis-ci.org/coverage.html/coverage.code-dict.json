{"/home/travis/build/npmtest/node-npmtest-coinbase/test.js":"/* istanbul instrument in package npmtest_coinbase */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coinbase/lib.npmtest_coinbase.js":"/* istanbul instrument in package npmtest_coinbase */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_coinbase = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_coinbase = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-coinbase/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-coinbase && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_coinbase */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_coinbase\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_coinbase.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_coinbase.rollup.js'] =\n            local.assetsDict['/assets.npmtest_coinbase.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_coinbase.__dirname + '/lib.npmtest_coinbase.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/index.js":"var Account       = require('./lib/model/Account.js'),\n    Address       = require('./lib/model/Address.js'),\n    Buy           = require('./lib/model/Buy.js'),\n    Checkout      = require('./lib/model/Checkout.js'),\n    Client        = require('./lib/Client.js'),\n    Deposit       = require('./lib/model/Deposit.js'),\n    Merchant      = require('./lib/model/Merchant.js'),\n    Notification  = require('./lib/model/Notification.js'),\n    Order         = require('./lib/model/Order.js'),\n    PaymentMethod = require('./lib/model/PaymentMethod.js'),\n    Sell          = require('./lib/model/Sell.js'),\n    Transaction   = require('./lib/model/Transaction.js'),\n    User          = require('./lib/model/User.js'),\n    Withdrawal    = require('./lib/model/Withdrawal.js');\n\nvar model = {\n  'Account'       : Account,\n  'Address'       : Address,\n  'Buy'           : Buy,\n  'Checkout'      : Checkout,\n  'Deposit'       : Deposit,\n  'Merchant'      : Merchant,\n  'Notification'  : Notification,\n  'Order'         : Order,\n  'PaymentMethod' : PaymentMethod,\n  'Sell'          : Sell,\n  'Transaction'   : Transaction,\n  'User'          : User,\n  'Withdrawal'    : Withdrawal\n};\n\nmodule.exports = {\n  'Client' : Client,\n  'model'  : model\n};\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Account.js":"//\n// The Account object is the primary abstraction to the Conbase API.\n//\n\"use strict\";\nvar AccountBase = require('./AccountBase'),\n    handleError = require('../errorHandler').handleError,\n    Address     = require('./Address'),\n    Transaction = require('./Transaction'),\n    Buy         = require('./Buy'),\n    Sell        = require('./Sell'),\n    Deposit     = require('./Deposit'),\n    Withdrawal  = require('./Withdrawal'),\n    _           = require('lodash');\n\n//\n// ##CONSTRUCTOR\n//\n// _args `client` and `data` are required_\n//\n//```\n// var Account = require('coinbase').model.Account;\n// var myAccount = new Account(client, {'id': 'A1234'});\n//```\n// _normally you will get account instances from `Account` methods on the `Client`\n// but this constructor is useful if you already know the id of the account and\n// wish to reduce calls to the remote API._\n//\n// - - -\nfunction Account(client, data) {\n  if (!(this instanceof Account)) {\n    return new Account(client, data);\n  }\n  AccountBase.call(this, client, data);\n}\n\nAccount.prototype = Object.create(AccountBase.prototype);\n\nAccount.prototype.delete = function(callback) {\n  var path = \"accounts/\" + this.id;\n  this.client._deleteHttp(path, callback);\n};\n\nAccount.prototype.setPrimary = function(callback) {\n  var path = \"accounts/\" + this.id + \"/primary\";\n  this.client._postHttp(path, null, callback);\n};\n\nAccount.prototype.update = function(args, callback) {\n  var self = this;\n  var path = \"accounts/\" + this.id;\n  this.client._putHttp(path, args, function myPut(err, result) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    var account = new Account(self.client, result.data);\n    callback(null, account);\n  });\n};\n\n//```\n// args = {\n//   'id' : account_id\n// };\nAccount.prototype.getAddresses = function(args, callback) {\n  var opts = {\n    'colName'  : 'addresses',\n    'ObjFunc'  : Address,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getAddress = function(addressId, callback) {\n  var opts = {\n    'colName'  : 'addresses',\n    'ObjFunc'  : Address,\n    'id'       : addressId\n  };\n  this._getOne(opts, callback)\n};\n\n// ```\n// args = {\n//   'name': address label, (optional)\n//   'callback_url': callback_url (optional)\n// };\n// ```\nAccount.prototype.createAddress = function(args, callback) {\n  var opts = {\n    'colName'  : 'addresses',\n    'ObjFunc'  : Address,\n    'params'   : args\n  };\n  this._postOne(opts, callback)\n};\n\nAccount.prototype.getTransactions = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'transactions',\n    'ObjFunc'  : Transaction,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getTransaction = function(transaction_id, callback) {\n\n  var opts = {\n    'colName' : 'transactions',\n    'ObjFunc' : Transaction,\n    'id'      : transaction_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n//```\n// args = {\n//   'to'          : account_id,\n//   'amount'      : amount,\n//   'currency'    : currency,\n//   'description' : notes\n// };\n\nAccount.prototype.transferMoney = function(args, callback) {\n  args.type = 'transfer';\n  this._initTxn(args, callback);\n};\n\n//```\n// args = {\n//   'to'                 : bitcoin address or email,\n//   'amount'             : amount,\n//   'currency'           : currency,\n//   'description'        : notes,\n//   'skip_notifications' : don’t send notification emails,\n//   'fee'                : transaction fee,\n//   'idem'               : token to ensure idempotence\n// };\nAccount.prototype.sendMoney = function(args, callback, twoFactorAuth) {\n\n  var tfa = twoFactorAuth ? {'CB-2FA-Token': twoFactorAuth} : null;\n  args.type = 'send';\n\n  this._initTxn(args, callback, tfa);\n};\n\n//```\n// args = {\n//   'to'          : account_id,\n//   'amount'      : amount,\n//   'currency'    : currency,\n//   'description' : notes\n// };\nAccount.prototype.requestMoney = function(args, callback) {\n  args.type = 'request';\n  this._initTxn(args, callback);\n};\n\n// Buys\nAccount.prototype.getBuys = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'buys',\n    'ObjFunc'  : Buy,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getBuy = function(buy_id, callback) {\n\n  var opts = {\n    'colName'  : 'buys',\n    'ObjFunc'  : Buy,\n    'id'       : buy_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n\n//```\n// args = {\n//   'amount'                  : amount,\n//   'total'                   : total,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'agree_btc_amount_varies' : agree_btc_amount_varies,\n//   'commit'                  : commit,\n//   'quote'                   : quote\n// };\nAccount.prototype.buy = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'buys',\n    'ObjFunc'  : Buy,\n    'params'   : args\n  };\n\n  this._postOne(opts, callback)\n};\n\n// Sells\nAccount.prototype.getSells = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'sells',\n    'ObjFunc'  : Sell,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getSell = function(sell_id, callback) {\n\n  var opts = {\n    'colName'  : 'sells',\n    'ObjFunc'  : Sell,\n    'id'       : sell_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n\n//```\n// args = {\n//   'amount'                  : amount,\n//   'total'                   : total,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'agree_btc_amount_varies' : agree_btc_amount_varies,\n//   'commit'                  : commit,\n//   'quote'                   : quote\n// };\nAccount.prototype.sell = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'sells',\n    'ObjFunc'  : Sell,\n    'params'   : args\n  };\n\n  this._postOne(opts, callback)\n};\n\n// Deposits\nAccount.prototype.getDeposits = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'deposits',\n    'ObjFunc'  : Deposit,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getDeposit = function(deposit_id, callback) {\n\n  var opts = {\n    'colName'  : 'deposit',\n    'ObjFunc'  : Deposit,\n    'id'       : deposit_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n\n//```\n// args = {\n//   'amount'                  : amount,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'commit'                  : commit,\n// };\nAccount.prototype.deposit = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'deposits',\n    'ObjFunc'  : Deposit,\n    'params'   : args\n  };\n\n  this._postOne(opts, callback)\n};\n\n// Withdrawals\nAccount.prototype.getWithdrawals = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'withdrawals',\n    'ObjFunc'  : Withdrawal,\n  };\n\n  this._getAll(_.assign(args || {}, opts), callback)\n};\n\nAccount.prototype.getWithdrawal = function(withdrawal_id, callback) {\n\n  var opts = {\n    'colName'  : 'withdrawals',\n    'ObjFunc'  : Withdrawal,\n    'id'       : withdrawal_id\n  };\n\n  this._getOne(opts, callback);\n};\n\n\n//```\n// args = {\n//   'amount'                  : amount,\n//   'currency'                : currency,\n//   'payment_method'          : payment_method_id,\n//   'commit'                  : commit,\n// };\nAccount.prototype.withdraw = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'withdrawals',\n    'ObjFunc'  : Withdrawal,\n    'params'   : args\n  };\n\n  this._postOne(opts, callback)\n};\n\nmodule.exports = Account;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/AccountBase.js":"//\n// The AccountBase object has helper methods for the Account API\n//\n\"use strict\";\nvar BaseModel   = require('./BaseModel'),\n    handleError = require('../errorHandler').handleError,\n    Transaction = require('./Transaction'),\n    _           = require('lodash');\n\n\n// Constructor\n//\n// You must instantiate an 'Account' with the 'new' operator.\n// ```\n// new Acccount(c,d)\n// ```\n// 'client' and 'data' arguments are requried.\n//\nfunction AccountBase(client, data) {\n  if (!(this instanceof AccountBase)) {\n    return new AccountBase(client, data);\n  }\n  BaseModel.call(this, client, data);\n}\n\nAccountBase.prototype = Object.create(BaseModel.prototype);\n\n// INTERNAL API\n//\n// ```\n// opts = {\n//   'colName'  : colName,\n// };\n// ```\n//\nAccountBase.prototype._getAll = function(opts, callback, headers) {\n  var self = this;\n  var args = {};\n  var path;\n  if (this.hasField(opts, 'next_uri')) {\n    path = opts.next_uri.replace('/v2/', '');\n    args = null;\n  } else {\n    path = 'accounts/' + this.id + '/' + opts.colName;\n    if (this.hasField(opts, 'starting_after')) {\n      args.starting_after = opts.starting_after;\n    }\n    if (this.hasField(opts, 'ending_before')) {\n      args.ending_before = opts.ending_before;\n    }\n    if (this.hasField(opts, 'limit')) {\n      args.limit = opts.limit;\n    }\n    if (this.hasField(opts, 'order')) {\n      args.order = opts.order;\n    }\n  }\n\n  this.client._getHttp(path, args, function onGet(err, result) {\n    if (!handleError(err, result, callback)) {\n      if (result.data.length > 0) {\n        var ObjFunc = self.client._stringToClass(result.data[0].resource);\n      }\n      var objs = _.map(result.data, function onMap(obj) {\n        return new ObjFunc(self.client, obj, self);\n      });\n      callback(null, objs, result.pagination);\n    }\n  }, headers);\n};\n\n// INTERNAL API\n//\n// ```\n// opts = {\n//   'colName': colName,\n//   'id': id\n// };\n// ```\n//\nAccountBase.prototype._getOne = function(opts, callback, headers) {\n  var self = this;\n  var path = 'accounts/' + this.id + '/' + opts.colName + '/' + opts.id;\n  this.client._getHttp(path, null, function onGet(err, obj) {\n    if (!handleError(err, obj, callback)) {\n      var ObjFunc = self.client._stringToClass(obj.data.resource);\n      callback(null, new ObjFunc(self.client, obj.data, self));\n    }\n  }, headers);\n};\n\n// ```\n// opts = {\n//   'colName': colName,\n//   'params' : params\n// };\n// ```\nAccountBase.prototype._postOne = function(opts, callback, headers) {\n  var self = this;\n  var path = 'accounts/' + this.id + '/' + opts.colName;\n  this.client._postHttp(path, opts.params, function onPost(err, obj) {\n    if (!handleError(err, obj, callback)) {\n      var ObjFunc = self.client._stringToClass(obj.data.resource);\n      callback(null, new ObjFunc(self.client, obj.data, self));\n    }\n  }, headers);\n};\n\n// INTERNAL API\nAccountBase.prototype._initTxn = function(args, callback, headers) {\n  var self = this;\n  var path = 'accounts/' + this.id + \"/transactions\";\n\n  this.client._postHttp(path, args, function onPost(err, obj) {\n      if (!handleError(err, obj, callback)) {\n        var txn = new Transaction(self.client, obj.data, self);\n        callback(null, txn);\n      }\n    }, headers);\n};\n\nmodule.exports = AccountBase;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/BaseModel.js":"\"use strict\";\nvar Base = require('../Base');\nvar assign = require('object-assign');\n\n//\n// model super class that merges model data with object\n//\n\nfunction BaseModel(client, data) {\n  if (!(this instanceof BaseModel)) {\n    return new BaseModel(client, data);\n  }\n  if (!client) { throw new Error(\"client is null\"); }\n  this.client = client;\n  if (!data) { throw new Error(\"data is null\"); }\n  if (!data.hasOwnProperty('id') && \n      !data.hasOwnProperty('code') && \n      !data.hasOwnProperty('email')) \n    { throw new Error(\"data has no id, code, or email: \" + JSON.stringify(data));}\n\n  assign(this, data);\n}\n\nBaseModel.prototype = Object.create(Base.prototype);\n\nmodule.exports = BaseModel;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/Base.js":"\"use strict\";\n\nvar assign = require('object-assign');\n\n//\n// system super class with utils\n//\n\nfunction Base() {\n  if (!(this instanceof Base)) {\n    return new Base();\n  }\n}\n\nBase.prototype.hasField = function(obj, field) {\n  return (obj && obj.hasOwnProperty(field) && obj[field]);\n};\n\nBase.prototype.getProps = function() {\n  var tmp = {};\n  assign(tmp, this);\n  delete tmp.client;\n  delete tmp.account;\n  return tmp;\n};\n\nBase.prototype.dumpJSON = function() {\n  return JSON.stringify(this.getProps());\n};\n\nBase.prototype.toString = function() {\n  return this.dumpJSON();\n};\n\nmodule.exports = Base;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/errorHandler.js":"\"use strict\";\nvar createError = require('http-errors');\n\nfunction _convertErrorName(errorId) {\n\n  errorId = errorId.charAt(0).toUpperCase() + errorId.slice(1);\n  return errorId.replace(/(\\_\\w)/g, function(m) {\n    return m[1].toUpperCase();\n  });\n};\n\nfunction _parseError(error) {\n\n  if (error.errors) {\n    return error.errors[0];\n  }\n\n  if (error.error) {\n    return {\n      id: error.error,\n      message: error.error_description\n    };\n  }\n};\n\nfunction handleHttpError(err, response, callback) {\n\n  if (!callback) {\n    throw new Error(\"no callback for http error handler- check method signature\");\n  }\n\n  if (err) {\n    callback(err, null);\n    return true;\n  }\n  if (!response) {\n    callback(createError('no response'), null);\n    return true;\n  }\n  if (response.statusCode !== 200 &&\n      response.statusCode !== 201 &&\n      response.statusCode !== 204) {\n    var error;\n    try {\n      var errorBody = _parseError(JSON.parse(response.body));\n      error = createError(response.statusCode,\n                          errorBody.message,\n                          {name: _convertErrorName(errorBody.id)});\n    } catch (ex) {\n      error = createError(response.statusCode, response.body);\n    }\n    callback(error, null);\n    return true;\n  }\n  return false;\n}\n\nfunction handleError(err, obj, callback) {\n\n  if (!callback) {throw \"no callback - check method signature\";}\n  if (err) {\n    callback(err, null);\n    return true;\n  }\n  if (obj.error) {\n    callback(createError(obj.error, {name: 'APIError'}), null);\n    return true;\n  }\n  if (obj.errors) {\n    callback(createError(obj, {name: 'APIError'}), null);\n    return true;\n  }\n  if (obj.success !== undefined && obj.success !== true) {\n    callback(createError(obj, {name: 'APIError'}), null);\n    return true;\n  }\n  return false;\n}\n\nmodule.exports.handleError     = handleError;\nmodule.exports.handleHttpError = handleHttpError;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Transaction.js":"\"use strict\";\nvar BaseModel   = require('./BaseModel'),\n    handleError = require('../errorHandler').handleError;\n\n//##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Transaction = require('coinbase').model.Transaction;\n// var myTxn = new Transaction(client, data, account);\n//```\n// _normally you will get transactions from `Transaction` methods on the Account\n// or methods on existing instance of `Transaction`_\n// - - -\nfunction Transaction(client, data, account) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(client, data, account);\n  }\n  BaseModel.call(this, client, data);\n  if (!account) { throw new Error(\"no account arg\"); }\n  if (!account.id) { throw new Error(\"account has no id\"); }\n  this.account = account;\n}\n\nTransaction.prototype = Object.create(BaseModel.prototype);\n\nTransaction.prototype.resend = function(callback) {\n  var self = this;\n  if (self.type !== 'request') {\n    throw \"Can only resend 'request' transactions\";\n  }\n\n  var path = 'accounts/' + self.account.id +  '/transactions/' + self.id + '/resend';\n\n  self.client._postHttp(path, null, function onPut(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, result);\n    }\n  });\n};\n\nTransaction.prototype.complete = function(callback) {\n  var self = this;\n  if (self.type !== 'request') {\n    throw \"Can only complete 'request' transactions\";\n  }\n\n  var path = 'accounts/' + self.account.id +  '/transactions/' + self.id + '/complete';\n\n  self.client._postHttp(path, null, function onPut(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, new Transaction(self.client, result.data, self.account));\n    }\n  });\n};\n\nTransaction.prototype.cancel = function(callback) {\n  var self = this;\n  if (self.type !== 'request') {\n    throw \"Can only cancel 'request' transactions\";\n  }\n\n  var path = 'accounts/' + self.account.id +  '/transactions/' + self.id;\n\n  self.client._deleteHttp(path, function onDel(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, result);\n    }\n  });\n};\n\nmodule.exports = Transaction;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Address.js":"\"use strict\";\nvar BaseModel   = require('./BaseModel'),\n    Transaction = require('./Transaction'),\n    handleError = require('../errorHandler').handleError,\n    _           = require('lodash');\n\n//##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Address = require('coinbase').model.Address;\n// var myAddress = new Address(client, data, account);\n//```\n// _normally you will get address from `Address` methods on the Account\n// or methods on existing instance of `Address`_\n// - - -\n\nfunction Address(client, data, account) {\n  if (!(this instanceof Address)) {\n    return new Address(client, data, account);\n  }\n  BaseModel.call(this, client, data);\n  if (!account) { throw new Error(\"no account arg\"); }\n  if (!account.id) { throw new Error(\"account has no id\"); }\n  this.account = account;\n}\n\nAddress.prototype = Object.create(BaseModel.prototype);\n\nAddress.prototype.getTransactions = function(args, callback) {\n  var opts = {\n    'colName'  : 'addresses/' + this.id + '/transactions',\n    'ObjFunc'  : Transaction,\n  };\n\n  this.account._getAll(_.assign(args || {}, opts), callback)\n};\n\nmodule.exports = Address;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Buy.js":"\"use strict\";\nvar Transfer    = require('./Transfer'),\n    handleError = require('../errorHandler').handleError;\n\n//##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Buy = require('coinbase').model.Buy;\n// var myBuy = new Buy(client, data, account);\n//```\n// - - -\nfunction Buy(client, data, account) {\n  if (!(this instanceof Buy)) {\n    return new Buy(client, data, account);\n  }\n  Transfer.call(this, client, data, account);\n}\n\nBuy.prototype = Object.create(Transfer.prototype);\n\nBuy.prototype.commit = function(callback) {\n\n  var opts = {\n    'colName' : 'buys',\n    'ObjFunc' : Buy\n  };\n\n  this._commit(opts, callback);\n};\n\nmodule.exports = Buy;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Transfer.js":"\"use strict\";\nvar BaseModel   = require('./BaseModel'),\n    handleError = require('../errorHandler').handleError;\n\nfunction Transfer(client, data, account) {\n  if (!(this instanceof Transfer)) {\n    return new Transfer(client, data, account);\n  }\n  BaseModel.call(this, client, data);\n  if (!account) { throw new Error(\"no account arg\"); }\n  if (!account.id) { throw new Error(\"account has no id\"); }\n  this.account = account;\n}\n\nTransfer.prototype = Object.create(BaseModel.prototype);\n\nTransfer.prototype._commit = function(opts, callback) {\n  var self = this;\n\n  var path = 'accounts/' + self.account.id + '/' + opts.colName + '/' + self.id + '/commit';\n\n  self.client._postHttp(path, null, function onPut(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, new opts.ObjFunc(self.client, result.data, self.account));\n    }\n  });\n};\n\nmodule.exports = Transfer;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Sell.js":"\"use strict\";\nvar Transfer    = require('./Transfer'),\n    handleError = require('../errorHandler').handleError;\n\n//##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Sell = require('coinbase').model.Sell;\n// var mySell = new Sell(client, data, account);\n//```\n// - - -\nfunction Sell(client, data, account) {\n  if (!(this instanceof Sell)) {\n    return new Sell(client, data, account);\n  }\n  Transfer.call(this, client, data, account);\n}\n\nSell.prototype = Object.create(Transfer.prototype);\n\nSell.prototype.commit = function(callback) {\n\n  var opts = {\n    'colName' : 'sells',\n    'ObjFunc' : Sell\n  };\n\n  this._commit(opts, callback);\n};\n\nmodule.exports = Sell;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Deposit.js":"\"use strict\";\nvar Transfer    = require('./Transfer'),\n    handleError = require('../errorHandler').handleError;\n\n//##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Deposit = require('coinbase').model.Deposit;\n// var myDeposit = new Deposit(client, data, account);\n//```\n// - - -\nfunction Deposit(client, data, account) {\n  if (!(this instanceof Deposit)) {\n    return new Deposit(client, data, account);\n  }\n  Transfer.call(this, client, data, account);\n}\n\nDeposit.prototype = Object.create(Transfer.prototype);\n\nDeposit.prototype.commit = function(callback) {\n\n  var opts = {\n    'colName' : 'deposits',\n    'ObjFunc' : Deposit\n  };\n\n  this._commit(opts, callback);\n};\n\nmodule.exports = Deposit;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Withdrawal.js":"\"use strict\";\nvar Transfer    = require('./Transfer'),\n    handleError = require('../errorHandler').handleError;\n\n//##CONSTRUCTOR\n//\n// _args `client`, `data`, and `account` required_\n//\n//```\n// var Withdrawal = require('coinbase').model.Withdrawal;\n// var myWithdrawal = new Withdrawal(client, data, account);\n//```\n// - - -\nfunction Withdrawal(client, data, account) {\n  if (!(this instanceof Withdrawal)) {\n    return new Withdrawal(client, data, account);\n  }\n  Transfer.call(this, client, data, account);\n}\n\nWithdrawal.prototype = Object.create(Transfer.prototype);\n\nWithdrawal.prototype.commit = function(callback) {\n\n  var opts = {\n    'colName' : 'withdrawals',\n    'ObjFunc' : Withdrawal\n  };\n\n  this._commit(opts, callback);\n};\n\nmodule.exports = Withdrawal;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Checkout.js":"\"use strict\";\nvar BaseModel   = require('./BaseModel'),\n    Order       = require('./Order'),\n    handleError = require('../errorHandler').handleError,\n    _           = require('lodash');\n\n// ##CONSTRUCTOR\n//\n// _args `client` and `data` required_\n//\n//```\n// var Checkout = require('coinbase').model.Checkout;\n// var myCheckout = new Checkout(client, data);\n//```\nfunction Checkout(client, data) {\n  if (!(this instanceof Checkout)) {\n    return new Checkout(client, data);\n  }\n  BaseModel.call(this, client, data);\n}\n\nCheckout.prototype = Object.create(BaseModel.prototype);\n\nCheckout.prototype.getOrders = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'checkouts/' + this.id + '/orders',\n    'ObjFunc'  : Order\n  };\n\n  this.client._getAllHttp(_.assign(args || {}, opts), callback)\n};\n\nCheckout.prototype.createOrder = function(callback) {\n\n  var opts = {\n    'colName'  : 'checkouts/' + this.id + '/orders',\n    'ObjFunc' : Order,\n  };\n\n  this.client._postOneHttp(opts, callback);\n};\n\nmodule.exports = Checkout;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Order.js":"\"use strict\";\nvar BaseModel   = require('./BaseModel'),\n    handleError = require('../errorHandler').handleError;\n\n// ##CONSTRUCTOR\n//\n// _args `client` and `data` required_\n//\n//```\n// var Order = require('coinbase').model.Order;\n// var button = new Order(client, data);\n//```\nfunction Order(client, data) {\n  if (!(this instanceof Order)) {\n    return new Order(client, data);\n  }\n  BaseModel.call(this, client, data);\n}\n\nOrder.prototype = Object.create(BaseModel.prototype);\n\n//```\n// args = {\n//   'currency'        : currency,\n//   'mispayment'      : mispayment,\n//   'refund_address'  : refund_address,\n// };\nOrder.prototype.refund = function(args, callback) {\n  var self = this;\n  if (!self.client) {throw \"no client\";}\n  if (!self.id) {\n    callback(new Error(\"no order id\"), null);\n    return;\n  }\n\n  var path = 'orders/' + self.id + '/refund';\n\n  self.client._postHttp(path, args, function onPost(err, result) {\n    if (!handleError(err, result, callback)) {\n      var order = new Order(self.client, result.data);\n      callback(null, order);\n    }\n  });\n};\n\nmodule.exports = Order;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/Client.js":"\"use strict\";\nvar ClientBase    = require('./ClientBase'),\n    request       = require(\"request\"),\n    handleError   = require('./errorHandler').handleError,\n    Account       = require(\"./model/Account\"),\n    Checkout      = require(\"./model/Checkout\"),\n    Notification  = require(\"./model/Notification\"),\n    Order         = require(\"./model/Order\"),\n    PaymentMethod = require(\"./model/PaymentMethod\"),\n    User          = require(\"./model/User\"),\n    Merchant      = require(\"./model/Merchant\"),\n    crypto        = require(\"crypto\"),\n    _             = require(\"lodash\"),\n    qs            = require(\"querystring\"),\n    assign        = require(\"object-assign\"),\n    callback_key  = require('./CallbackKey.js');\n\n\nfunction Client(opts) {\n\n  if (!(this instanceof Client)) {\n    return new Client(opts);\n  }\n  ClientBase.call(this, opts);\n}\n\nClient.prototype = Object.create(ClientBase.prototype);\n\nClient.prototype.refresh = function(callback) {\n  var self = this;\n  var params = {\n                 'grant_type'    : 'refresh_token',\n                 'refresh_token' : this.refreshToken\n               };\n  var path = this.tokenUri;\n  this._postHttp(path, params, function myPost(err, result) {\n\n    if (err) {\n      err.type = etypes.TokenRefreshError;\n      callback(err, result);\n      return;\n    }\n    self.accessToken = result.access_token;\n    self.refreshToken = result.refresh_token;\n    callback(null, result);\n  });\n};\n\nClient.prototype.getAccounts = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'accounts',\n    'ObjFunc'  : Account\n  };\n\n  this._getAllHttp(_.assign(args || {}, opts), callback)\n};\n\nClient.prototype.getAccount = function(account_id, callback) {\n\n  var opts = {\n    'path'     : 'accounts/' + account_id,\n    'ObjFunc'  : Account\n  };\n  this._getOneHttp(opts, callback);\n};\n\nClient.prototype.createAccount = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'accounts',\n    'ObjFunc'  : Account,\n    'params'   : args\n  };\n\n  this._postOneHttp(opts, callback);\n};\n\nClient.prototype.getCurrentUser = function(callback) {\n\n  var opts = {\n    'path'     : 'user',\n    'ObjFunc'  : User\n  };\n\n  this._getOneHttp(opts, callback);\n};\n\nClient.prototype.getUser = function(userId, callback) {\n\n  var opts = {\n    'path'     : 'users/' + userId,\n    'ObjFunc'  : User\n  };\n\n  this._getOneHttp(opts, callback);\n};\n\nClient.prototype.getNotifications = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'notifications',\n    'ObjFunc'  : Notification\n  };\n\n  this._getAllHttp(_.assign(args || {}, opts), callback)\n};\n\nClient.prototype.getNotification = function(notificationId, callback) {\n\n  var opts = {\n    'path'     : 'notifications/' + notificationId,\n    'ObjFunc'  : Notification\n  };\n  this._getOneHttp(opts, callback);\n};\n\nClient.prototype.getBuyPrice = function(params, callback) {\n\n  var currencyPair;\n  if (params.currencyPair) {\n    currencyPair = params.currencyPair;\n  } else if (params.currency) {\n    currencyPair = 'BTC-' + params.currency;\n  } else {\n    currencyPair = 'BTC-USD';\n  }\n  this._getOneHttp({'path': 'prices/' + currencyPair + '/buy'}, callback);\n};\n\nClient.prototype.getSellPrice = function(params, callback) {\n\n  var currencyPair;\n  if (params.currencyPair) {\n    currencyPair = params.currencyPair;\n  } else if (params.currency) {\n    currencyPair = 'BTC-' + params.currency;\n  } else {\n    currencyPair = 'BTC-USD';\n  }\n  this._getOneHttp({'path': 'prices/' + currencyPair + '/sell'}, callback);\n};\n\nClient.prototype.getSpotPrice = function(params, callback) {\n\n  var currencyPair;\n  if (params.currencyPair) {\n    currencyPair = params.currencyPair;\n  } else if (params.currency) {\n    currencyPair = 'BTC-' + params.currency;\n  } else {\n    currencyPair = 'BTC-USD';\n  }\n  this._getOneHttp({'path': 'prices/' + currencyPair + '/spot'}, callback);\n};\n\n// deprecated. use getSpotPrice with ?date=YYYY-MM-DD\nClient.prototype.getHistoricPrices = function(params, callback) {\n\n  this._getOneHttp({'path': 'prices/historic', 'params': params} , callback);\n};\n\nClient.prototype.getCurrencies = function(callback) {\n\n  this._getOneHttp({'path': 'currencies'}, callback);\n};\n\nClient.prototype.getExchangeRates = function(params, callback) {\n\n  this._getOneHttp({'path': 'exchange-rates', 'params': params}, callback);\n};\n\nClient.prototype.getTime = function(callback) {\n\n  this._getOneHttp({'path': 'time'}, callback);\n};\n\nClient.prototype.getPaymentMethods = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'payment-methods',\n    'ObjFunc'  : PaymentMethod\n  };\n\n  this._getAllHttp(_.assign(args || {}, opts), callback)\n};\n\nClient.prototype.getPaymentMethod = function(methodId, callback) {\n\n  var opts = {\n    'path'     : 'payment-methods/' + methodId,\n    'ObjFunc'  : PaymentMethod\n  };\n\n  this._getOneHttp(opts, callback);\n};\n\n// Merchant Endpoints\nClient.prototype.getOrders = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'orders',\n    'ObjFunc'  : Order\n  };\n\n  this._getAllHttp(_.assign(args || {}, opts), callback)\n};\n\nClient.prototype.getOrder = function(orderId, callback) {\n\n  var opts = {\n    'path'     : 'orders/' + orderId,\n    'ObjFunc'  : Order\n  };\n\n  this._getOneHttp(opts, callback);\n};\n\nClient.prototype.createOrder = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'orders',\n    'ObjFunc' : Order,\n    'params' : args\n  };\n\n  this._postOneHttp(opts, callback);\n};\n\nClient.prototype.getCheckouts = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'checkouts',\n    'ObjFunc'  : Checkout\n  };\n\n  this._getAllHttp(_.assign(args || {}, opts), callback)\n\n};\n\nClient.prototype.getCheckout = function(checkoutId, callback) {\n\n  var opts = {\n    'path'     : 'checkouts/' + checkoutId,\n    'ObjFunc'  : Checkout\n  };\n\n  this._getOneHttp(opts, callback);\n};\n\nClient.prototype.createCheckout = function(args, callback) {\n\n  var opts = {\n    'colName'  : 'checkouts',\n    'ObjFunc' : Checkout,\n    'params' : args\n  };\n\n  this._postOneHttp(opts, callback);\n};\n\nClient.prototype.getMerchant = function(merchantId, callback) {\n\n  var opts = {\n    'path'    : 'merchants/' + merchantId,\n    'ObjFunc' : Merchant\n  };\n\n  this._getOneHttp(opts, callback);\n}\n\nClient.prototype.verifyCallback = function(body, signature) {\n  var verifier = crypto.createVerify('RSA-SHA256');\n  verifier.update(body);\n  return verifier.verify(callback_key, signature, 'base64');\n};\n\nClient.prototype.toString = function() {\n  return \"Coinbase API Client for \" + this.baseApiUri;\n};\n\nmodule.exports = Client;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/ClientBase.js":"\"use strict\";\nvar request       = require('request'),\n    handleError   = require('./errorHandler').handleError,\n    handleHttpError   = require('./errorHandler').handleHttpError,\n    Base          = require('./Base'),\n    Account       = require('./model/Account'),\n    Address       = require('./model/Address'),\n    Buy           = require('./model/Buy'),\n    Checkout      = require('./model/Checkout'),\n    Deposit       = require('./model/Deposit'),\n    Merchant      = require('./model/Merchant'),\n    Notification  = require('./model/Notification'),\n    Order         = require('./model/Order'),\n    PaymentMethod = require('./model/PaymentMethod'),\n    Sell          = require('./model/Sell'),\n    Transaction   = require('./model/Transaction'),\n    User          = require('./model/User'),\n    Withdrawal    = require('./model/Withdrawal'),\n    crypto        = require('crypto'),\n    _             = require('lodash'),\n    qs            = require('querystring'),\n    assign        = require('object-assign'),\n    CERT_STORE    = require('./CoinbaseCertStore');\n\nvar BASE_URI           = 'https://api.coinbase.com/v2/';\nvar TOKEN_ENDPOINT_URI = 'https://api.coinbase.com/oauth/token';\n\nvar MODELS = {\n  'account'        : Account,\n  'address'        : Address,\n  'buy'            : Buy,\n  'checkout'       : Checkout,\n  'deposit'        : Deposit,\n  'merchant'       : Merchant,\n  'notification'   : Notification,\n  'order'          : Order,\n  'payment_method' : PaymentMethod,\n  'sell'           : Sell,\n  'transaction'    : Transaction,\n  'user'           : User,\n  'withdrawal'     : Withdrawal\n};\n\n//\n// constructor\n//\n// opts = {\n//   'apiKey'       : apyKey,\n//   'apiSecret'    : apySecret,\n//   'baseApiUri'   : baseApiUri,\n//   'tokenUri'     : tokenUri,\n//   'caFile'       : caFile,\n//   'strictSSL'    : strictSSL,\n//   'accessToken'  : accessToken,\n//   'refreshToken' : refreshToken,\n//   'version'      : version\n// };\nfunction ClientBase(opts) {\n\n  if (!(this instanceof ClientBase)) {\n    return new ClientBase(opts);\n  }\n\n  // assign defaults and options to the context\n  assign(this, {\n    baseApiUri: BASE_URI,\n    tokenUri: TOKEN_ENDPOINT_URI,\n    caFile: CERT_STORE,\n    strictSSL: true\n  }, opts);\n\n  // check for the different auth strategies\n  var api = !!(this.apiKey && this.apiSecret)\n  var oauth = !!this.accessToken;\n\n  // XOR\n  if (!(api ^ oauth)) {\n    throw new Error('you must either provide an \"accessToken\" or the \"apiKey\" & \"apiSecret\" parameters');\n  }\n}\n\nClientBase.prototype = Object.create(Base.prototype);\n\n//\n// private methods\n//\n\nClientBase.prototype._setAccessToken = function(path) {\n\n  // OAuth access token\n  if (this.accessToken) {\n    if (path.indexOf('?') > -1) {\n      return path + '&access_token=' + this.accessToken;\n    }\n    return path + '?access_token=' + this.accessToken;\n  }\n  return path\n};\n\nClientBase.prototype._generateSignature = function(path, method, bodyStr) {\n  var timestamp = Math.floor(Date.now() / 1000);\n  var message = timestamp + method + '/v2/' + path + bodyStr;\n  var signature = crypto.createHmac('sha256', this.apiSecret).update(message).digest('hex');\n\n  return {\n    'digest': signature,\n    'timestamp': timestamp\n  };\n};\n\nClientBase.prototype._generateReqOptions = function(url, path, body, method, headers) {\n\n  var bodyStr = body ? JSON.stringify(body) : '';\n\n  // specify the options\n  var options = {\n    'url': url,\n    'ca': this.caFile,\n    'strictSSL': this.strictSSL,\n    'body': bodyStr,\n    'method': method,\n    'headers' : {\n      'Content-Type'     : 'application/json',\n      'Accept'           : 'application/json',\n      'User-Agent'       : 'coinbase/node/1.0.4'\n    }\n  };\n\n  // add additional headers when we're using the \"api key\" and \"api secret\"\n  if (this.apiSecret && this.apiKey) {\n    var sig = this._generateSignature(path, method, bodyStr);\n\n    // add signature and nonce to the header\n    options.headers = assign(options.headers, {\n      'CB-ACCESS-SIGN': sig.digest,\n      'CB-ACCESS-TIMESTAMP': sig.timestamp,\n      'CB-ACCESS-KEY': this.apiKey,\n      'CB-VERSION': this.version || '2016-02-18'\n    })\n  }\n\n  return options;\n};\n\nClientBase.prototype._getHttp = function(path, args, callback, headers) {\n  var params = '';\n  if (args && !_.isEmpty(args)) {\n    params = '?' + qs.stringify(args);\n  }\n\n  var url = this.baseApiUri + this._setAccessToken(path + params);\n  var opts = this._generateReqOptions(url, path + params, null, 'GET', headers);\n\n  request.get(opts, function onGet(err, response, body) {\n    if (!handleHttpError(err, response, callback)) {\n      if (!body) {\n        callback(new Error(\"empty response\"), null);\n      } else {\n        var obj = JSON.parse(body);\n        callback(null, obj);\n      }\n    }\n  });\n};\n\nClientBase.prototype._postHttp = function(path, body, callback, headers) {\n\n  var url = this.baseApiUri + this._setAccessToken(path);\n  body = body || {}\n\n  var options = this._generateReqOptions(url, path, body, 'POST', headers);\n\n  request.post(options, function onPost(err, response, body) {\n    if (!handleHttpError(err, response, callback)) {\n      if (body) {\n        var obj = JSON.parse(body);\n        callback(null, obj);\n      } else {\n        callback(null, body);\n      }\n    }\n  });\n};\n\nClientBase.prototype._putHttp = function(path, body, callback, headers) {\n\n  var url = this.baseApiUri + this._setAccessToken(path);\n\n  var options = this._generateReqOptions(url, path, body, 'PUT', headers);\n\n  request.put(options, function onPut(err, response, body) {\n    if (!handleHttpError(err, response, callback)) {\n      if (body) {\n        var obj = JSON.parse(body);\n        callback(null, obj);\n      } else {\n        callback(null, body);\n      }\n    }\n  });\n};\n\n\nClientBase.prototype._deleteHttp = function(path, callback, headers) {\n  var url = this.baseApiUri + this._setAccessToken(path);\n  request.del(url, this._generateReqOptions(url, path, null, 'DELETE', headers),\n  function onDel(err, response, body) {\n    if (!handleHttpError(err, response, callback)) {\n      callback(null, body);\n    }\n  });\n};\n\n//\n// opts = {\n//   'colName'        : colName,\n//   'next_uri'       : next_uri,\n//   'starting_after' : starting_after,\n//   'ending_before'  : ending_before,\n//   'limit'          : limit,\n//   'order'          : order\n// };\n// ```\n//\nClientBase.prototype._getAllHttp = function(opts, callback, headers) {\n  var self = this;\n  var args = {}\n  var path;\n  if (this.hasField(opts, 'next_uri')) {\n    path = opts.next_uri.replace('/v2/', '');\n    args = null;\n  } else {\n    path = opts.colName;\n    if (this.hasField(opts, 'starting_after')) {\n      args.starting_after = opts.starting_after;\n    }\n    if (this.hasField(opts, 'ending_before')) {\n      args.ending_before = opts.ending_before;\n    }\n    if (this.hasField(opts, 'limit')) {\n      args.limit = opts.limit;\n    }\n    if (this.hasField(opts, 'order')) {\n      args.order = opts.order;\n    }\n  }\n\n  this._getHttp(path, args, function onGet(err, result) {\n    if (!handleError(err, result, callback)) {\n      var objs = [];\n      if (result.data.length !== 0) {\n        var ObjFunc = self._stringToClass(result.data[0].resource);\n        objs = _.map(result.data, function onMap(obj) {\n          return new ObjFunc(self, obj);\n        });\n      }\n      callback(null, objs, result.pagination);\n    }\n  }, headers);\n};\n\n//\n// args = {\n// 'path'     : path,\n// 'params'   : params,\n// }\n//\nClientBase.prototype._getOneHttp = function(args, callback, headers) {\n  var self = this;\n  this._getHttp(args.path, args.params, function onGet(err, obj) {\n    if (!handleError(err, obj, callback)) {\n      if (obj.data.resource) {\n        var ObjFunc = self._stringToClass(obj.data.resource);\n        callback(null, new ObjFunc(self, obj.data));\n      } else {\n        callback(null, obj);\n      }\n    }\n  }, headers);\n};\n\n//\n// opts = {\n// 'colName'  : colName,\n// 'params'   : args\n// }\n//\nClientBase.prototype._postOneHttp = function(opts, callback, headers) {\n   var self = this;\n   var body = opts.params;\n   this._postHttp(opts.colName, body, function onPost(err, obj) {\n    if (!handleError(err, obj, callback)) {\n      if (obj.data.resource) {\n        var ObjFunc = self._stringToClass(obj.data.resource);\n        callback(null, new ObjFunc(self, obj.data));\n      } else {\n        callback(null, obj);\n      }\n    }\n  }, headers);\n};\n\nClientBase.prototype._stringToClass = function(name) {\n  return MODELS[name]\n};\n\nmodule.exports = ClientBase;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Merchant.js":"\"use strict\";\nvar BaseModel = require('./BaseModel');\n\n//##CONSTRUCTOR\n//\n// _args `client` and `data` are required_\n//\n//```\n// var Merchant = require('coinbase').model.Merchant;\n// var myMethod = new Merchant(client, data);\n//```\n// _normally you will get users from `Merchant` methods on the `Client`._\n// - - -\nfunction Merchant(client, data) {\n  if (!(this instanceof Merchant)) {\n    return new Merchant(client, data);\n  }\n  BaseModel.call(this, client, data);\n}\n\nMerchant.prototype = Object.create(BaseModel.prototype);\n\nmodule.exports = Merchant;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/Notification.js":"\"use strict\";\nvar BaseModel   = require('./BaseModel');\n\n//##CONSTRUCTOR\n//\n// _args `client` and `data` required_\n//\n//```\n// var Notification = require('coinbase').model.Notification;\n// var myNotification = new Notification(client, data);\n//```\n// - - -\n\nfunction Notification(client, data) {\n  if (!(this instanceof Notification)) {\n    return new Notification(client, data);\n  }\n  BaseModel.call(this, client, data);\n}\n\nNotification.prototype = Object.create(BaseModel.prototype);\n\nmodule.exports = Notification;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/PaymentMethod.js":"\"use strict\";\nvar BaseModel = require('./BaseModel');\n\n//##CONSTRUCTOR\n//\n// _args `client` and `data` are required_\n//\n//```\n// var PaymentMethod = require('coinbase').model.PaymentMethod;\n// var myMethod = new PaymentMethod(client, data);\n//```\n// _normally you will get users from `PaymentMethod` methods on the `Client`._\n// - - -\nfunction PaymentMethod(client, data) {\n  if (!(this instanceof PaymentMethod)) {\n    return new PaymentMethod(client, data);\n  }\n  BaseModel.call(this, client, data);\n}\n\nPaymentMethod.prototype = Object.create(BaseModel.prototype);\n\nmodule.exports = PaymentMethod;\n\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/model/User.js":"\"use strict\";\nvar BaseModel   = require('./BaseModel'),\n    handleError = require('../errorHandler').handleError;\n\nfunction User(client, data) {\n  if (!(this instanceof User)) {\n    return new User(client, data);\n  }\n  BaseModel.call(this, client, data);\n}\n\nUser.prototype = Object.create(BaseModel.prototype);\n\nUser.prototype.update = function(args, callback) {\n  var self = this;\n  if (!self.client) {throw \"no client\";}\n  if (!self.id) {\n    callback(new Error(\"no user id\"), null);\n    return;\n  }\n\n  var path = 'user';\n\n  self.client._putHttp(path, args, function onPut(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, new User(self.client, result.data));\n    }\n  });\n};\n\nUser.prototype.showAuth = function(callback) {\n  var self = this;\n  if (!self.client) {throw \"no client\";}\n  if (!self.id) {\n    callback(new Error(\"no user id\"), null);\n    return;\n  }\n\n  var path = 'user/auth';\n\n  self.client._getHttp(path, null, function onGet(err, result) {\n    if (!handleError(err, result, callback)) {\n      callback(null, result.data);\n    }\n  });\n};\n\nmodule.exports = User;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/CoinbaseCertStore.js":"\"use strict\";\n\nvar cert_store = [\n  [\n    \"-----BEGIN CERTIFICATE-----\",\n    \"MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh\",\n    \"MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\",\n    \"d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD\",\n    \"QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT\",\n    \"MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\",\n    \"b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG\",\n    \"9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB\",\n    \"CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97\",\n    \"nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt\",\n    \"43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P\",\n    \"T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4\",\n    \"gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO\",\n    \"BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR\",\n    \"TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw\",\n    \"DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr\",\n    \"hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg\",\n    \"06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF\",\n    \"PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls\",\n    \"YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk\",\n    \"CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=\",\n    \"-----END CERTIFICATE-----\"\n  ].join(\"\\n\"),\n  [\n    \"-----BEGIN CERTIFICATE-----\",\n    \"MIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB\",\n    \"yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\",\n    \"ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp\",\n    \"U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW\",\n    \"ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0\",\n    \"aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL\",\n    \"MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW\",\n    \"ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln\",\n    \"biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp\",\n    \"U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y\",\n    \"aXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1\",\n    \"nmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex\",\n    \"t0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz\",\n    \"SdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG\",\n    \"BO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+\",\n    \"rCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/\",\n    \"NIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E\",\n    \"BAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH\",\n    \"BgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy\",\n    \"aXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv\",\n    \"MzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE\",\n    \"p6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y\",\n    \"5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK\",\n    \"WE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ\",\n    \"4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N\",\n    \"hnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq\",\n    \"-----END CERTIFICATE-----\"\n  ].join(\"\\n\"),\n  [\n    \"-----BEGIN CERTIFICATE-----\",\n    \"MIIDxTCCAq2gAwIBAgIQAqxcJmoLQJuPC3nyrkYldzANBgkqhkiG9w0BAQUFADBs\",\n    \"MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\",\n    \"d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j\",\n    \"ZSBFViBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTMxMTExMDAwMDAwMFowbDEL\",\n    \"MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3\",\n    \"LmRpZ2ljZXJ0LmNvbTErMCkGA1UEAxMiRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug\",\n    \"RVYgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMbM5XPm\",\n    \"+9S75S0tMqbf5YE/yc0lSbZxKsPVlDRnogocsF9ppkCxxLeyj9CYpKlBWTrT3JTW\",\n    \"PNt0OKRKzE0lgvdKpVMSOO7zSW1xkX5jtqumX8OkhPhPYlG++MXs2ziS4wblCJEM\",\n    \"xChBVfvLWokVfnHoNb9Ncgk9vjo4UFt3MRuNs8ckRZqnrG0AFFoEt7oT61EKmEFB\",\n    \"Ik5lYYeBQVCmeVyJ3hlKV9Uu5l0cUyx+mM0aBhakaHPQNAQTXKFx01p8VdteZOE3\",\n    \"hzBWBOURtCmAEvF5OYiiAhF8J2a3iLd48soKqDirCmTCv2ZdlYTBoSUeh10aUAsg\",\n    \"EsxBu24LUTi4S8sCAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQF\",\n    \"MAMBAf8wHQYDVR0OBBYEFLE+w2kD+L9HAdSYJhoIAu9jZCvDMB8GA1UdIwQYMBaA\",\n    \"FLE+w2kD+L9HAdSYJhoIAu9jZCvDMA0GCSqGSIb3DQEBBQUAA4IBAQAcGgaX3Nec\",\n    \"nzyIZgYIVyHbIUf4KmeqvxgydkAQV8GK83rZEWWONfqe/EW1ntlMMUu4kehDLI6z\",\n    \"eM7b41N5cdblIZQB2lWHmiRk9opmzN6cN82oNLFpmyPInngiK3BD41VHMWEZ71jF\",\n    \"hS9OMPagMRYjyOfiZRYzy78aG6A9+MpeizGLYAiJLQwGXFK3xPkKmNEVX58Svnw2\",\n    \"Yzi9RKR/5CYrCsSXaQ3pjOLAEFe4yHYSkVXySGnYvCoCWw9E1CAx2/S6cCZdkGCe\",\n    \"vEsXCS+0yx5DaMkHJ8HSXPfqIbloEpw8nL+e/IBcm2PN7EeqJSdnoDfzAIJ9VNep\",\n    \"+OkuE6N36B9K\",\n    \"-----END CERTIFICATE-----\"\n  ].join(\"\\n\")\n];\n\nmodule.exports = cert_store;\n","/home/travis/build/npmtest/node-npmtest-coinbase/node_modules/coinbase/lib/CallbackKey.js":"\"use strict\";\nvar public_key = [\n  \"-----BEGIN PUBLIC KEY-----\",\n  \"MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA9MsJBuXzFGIh/xkAA9Cy\",\n  \"QdZKRerV+apyOAWY7sEYV/AJg+AX/tW2SHeZj+3OilNYm5DlBi6ZzDboczmENrFn\",\n  \"mUXQsecsR5qjdDWb2qYqBkDkoZP02m9o9UmKObR8coKW4ZBw0hEf3fP9OEofG2s7\",\n  \"Z6PReWFyQffnnecwXJoN22qjjsUtNNKOOo7/l+IyGMVmdzJbMWQS4ybaU9r9Ax0J\",\n  \"4QUJSS/S4j4LP+3Z9i2DzIe4+PGa4Nf7fQWLwE45UUp5SmplxBfvEGwYNEsHvmRj\",\n  \"usIy2ZunSO2CjJ/xGGn9+/57W7/SNVzk/DlDWLaN27hUFLEINlWXeYLBPjw5GGWp\",\n  \"ieXGVcTaFSLBWX3JbOJ2o2L4MxinXjTtpiKjem9197QXSVZ/zF1DI8tRipsgZWT2\",\n  \"/UQMqsJoVRXHveY9q9VrCLe97FKAUiohLsskr0USrMCUYvLU9mMw15hwtzZlKY8T\",\n  \"dMH2Ugqv/CPBuYf1Bc7FAsKJwdC504e8kAUgomi4tKuUo25LPZJMTvMTs/9IsRJv\",\n  \"I7ibYmVR3xNsVEpupdFcTJYGzOQBo8orHKPFn1jj31DIIKociCwu6m8ICDgLuMHj\",\n  \"7bUHIlTzPPT7hRPyBQ1KdyvwxbguqpNhqp1hG2sghgMr0M6KMkUEz38JFElsVrpF\",\n  \"4z+EqsFcIZzjkSG16BjjjTkCAwEAAQ==\",\n  \"-----END PUBLIC KEY-----\"\n].join(\"\\n\");\n\nmodule.exports = public_key;\n"}